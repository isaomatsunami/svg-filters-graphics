<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
     var basePointX       = 180;
     var basePointY       = 200;
     var slantAngle       = 40;
     var zSlantX          = 0;
     var zSlantY          = 0;
     var cosAngle         = Math.cos(slantAngle*Math.PI/180);
     var sinAngle         = Math.sin(slantAngle*Math.PI/180);
     var strokeWidth      = 4;
     var style            = "stroke:red;stroke-width:4";
     var dashStyles       = ['4 4 4 4',
                             '4 4 4 4',
                             '4 4 4 4'];
     var dashCount        = 3;
     var strokeColors     = ['red','green',
                             'blue','magenta','pink'];
     var colorCount       = 5;
     var axisCount        = 3;
     var posAxesLengths   = [200,250,180]; //z,x,y
     var negAxesLengths   = [100,150,180]; //z,x,y
     var amplitudeX       = 150;
     var amplitudeY       = 0;
     var minorY           = 30;
     var majorZ           = 80;
     var deltaZ           = 1;
     var startZ           = 0;
     var endZ             = 3*posAxesLengths[0]/4;
     var cutAwayHeight    = 100;
     var startX           = 0;
     var widthX           = 100;
     var deltaX           = 10;
     var zCoord           = 0;
     var xCoord           = 0;
     var yCoord           = 0;
     var vertexCount      = 4;
     var polygonXPts      = Array(vertexCount);
     var polygonYPts      = Array(vertexCount);
     var rVal             = 0;
     var gVal             = 0;
     var bVal             = 0;

     var pGonNode         = null;
     var lineNode         = null;
     var ellipseNode      = null;
     var polygonNode      = null;
     var svgDocument      = null;
     var gcNode           = null;
     var svgNS            = "http://www.w3.org/2000/svg";
 
     function init(evt) {
        svgDocument = evt.target.ownerDocument; 
        gcNode = svgDocument.getElementById("gc")
 
        draw3DAxes();
        draw3DSurface();
     }

     function draw3DAxes() {
        // left outward (positive) z-axis 
        zSlantX = posAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = posAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-zSlantX);
        lineNode.setAttribute("y2", basePointY+zSlantY);
        gcNode.appendChild(lineNode);

        // right receding (negative) z-axis 
        zSlantX = negAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = negAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[0];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+zSlantX);
        lineNode.setAttribute("y2", basePointY-zSlantY);
        gcNode.appendChild(lineNode);

        // upper vertical y-axis 
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY-posAxesLengths[2]);
        gcNode.appendChild(lineNode);

        // lower vertical y-axis 
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[1];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY+negAxesLengths[2]);
        gcNode.appendChild(lineNode);

        // right horizontal x-axis 
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+posAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
        gcNode.appendChild(lineNode);

        // left horizontal x-axis 
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[2];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-negAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
        gcNode.appendChild(lineNode);
     }

     function draw3DSurface() {
        for(var z=startZ; z<=endZ; z+=deltaZ) {
           // calculate coordinates of vertices...
           zCoord = z;
           xCoord = 0;
           yCoord = -cutAwayHeight;

           polygonXPts[0] = xCoord-zCoord*sinAngle;
           polygonYPts[0] = yCoord+zCoord*cosAngle;

           zCoord = z;
           xCoord = widthX;
           yCoord = -cutAwayHeight+minorY;

           polygonXPts[1] = xCoord-zCoord*sinAngle;
           polygonYPts[1] = yCoord+zCoord*cosAngle;

           zCoord = z;
           xCoord = widthX;
           yCoord = 0;

           polygonXPts[2] = xCoord-zCoord*sinAngle;
           polygonYPts[2] = yCoord+zCoord*cosAngle;

           zCoord = z;
           xCoord = 0;
           yCoord = 0;

           polygonXPts[3] = xCoord-zCoord*sinAngle;
           polygonYPts[3] = yCoord+zCoord*cosAngle;

           points = "M";
           for(var v=0; v<vertexCount; v++) {
              points += (basePointX+polygonXPts[v])+","+
                        (basePointY+polygonYPts[v])+" ";
           }
           points += "z";

           rVal = z*255/(endZ-startZ);
           gVal = z*255/(endZ-startZ);

           style = "fill:rgb("+rVal+","+gVal+","+bVal+")";

           if( z == endZ ) {
              style += ";stroke:red;stroke-width:2";
           }

           polygonNode = svgDocument.createElementNS(svgNS, "path");
           polygonNode.setAttribute("style",style);
           polygonNode.setAttribute("filter","url(#blurFilter1)"); 
           polygonNode.setAttribute("d", points);
           gcNode.appendChild(polygonNode);
        }
     }
  ]]> </script>

<!-- ============================ -->
<defs>
  <filter
     id="blurFilter1"
     filterUnits="objectBoundingBox"
     x="0" y="0" 
     width="100%" height="100%"> 
     <feGaussianBlur stdDeviation="4"/>
  </filter>
</defs>

<g id="gc" transform="translate(20,0)">
</g>
</svg>

