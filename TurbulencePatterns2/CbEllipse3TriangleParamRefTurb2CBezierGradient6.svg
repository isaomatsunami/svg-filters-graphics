<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
    var basePointX      = 100;
    var basePointY      = 200;

    var strokeColor     = "";
    var strokeColors    = ['red','green','blue','yellow'];
    var colorCount      = 4;
    var strokeWidth     = 2.5;
    var bezierStyle     = "";
    var triangleStyle   = "";
    var ellipseStyle    = "";
    var opacity         = 0.5;
    var points          = "";
    var cBezier         = 4;
    var bezierXPts      = Array(cBezier);
    var bezierYPts      = Array(cBezier);
    var bezierWidth     = 0;
    var deltaT          = 0;
    var pointCount      = 0;
    var bezierCount     = 0;
    var bezierGap       = 2;
    var stripeGap       = 8;
    var paramXPts       = Array(1);
    var paramYPts       = Array(1);
    var rVal            = 0;
    var gVal            = 0;
    var bVal            = 0;
    var majorAxis       = 40;
    var minorAxis       = 20;

    var ellipseNode     = null;
    var triangleNode    = null;
    var bezierNode      = null;
    var lineNode        = null;
    var gcNode          = null;
    var svgDocument     = null;
    var svgNS           = "http://www.w3.org/2000/svg";

    function init(evt) {
       svgDocument = evt.target.ownerDocument; 
       gcNode = svgDocument.getElementById("gc")

       initializeBezier();
       parameterizeBezier();
       renderBezier();
    }

    function initializeBezier() {
       bezierXPts[0] = 100;
       bezierYPts[0] = 400;

       bezierXPts[1] = 200;
       bezierYPts[1] = -200;

       bezierXPts[2] = 300;
       bezierYPts[2] = 450;

       bezierXPts[3] = 500;
       bezierYPts[3] = 350;

       points  = "M"+bezierXPts[0]+","+bezierYPts[0]+" "+
                 "C"+bezierXPts[1]+","+bezierYPts[1]+" "+
                     bezierXPts[2]+","+bezierYPts[2]+" "+
                     bezierXPts[3]+","+bezierYPts[3];

       bezierStyle = "stroke-width:8; stroke:red;fill:none";

     //bezierNode = document.createElement("path");
       bezierNode = document.createElementNS(svgNS, "path");
       bezierNode.setAttribute("style", bezierStyle);
       bezierNode.setAttribute("d", points);

     //gcNode.appendChild(bezierNode);
    }

    function parameterizeBezier() {
       bezierWidth = bezierXPts[3]-bezierXPts[0];
       deltaT      = 1.0/bezierWidth;

       for(var t=0; t<1; t+=deltaT) {
          paramXPts[pointCount] = bezierXPts[0]*t*t*t+
                                  bezierXPts[1]*t*t*(1-t)*3+
                                  bezierXPts[2]*t*(1-t)*(1-t)*3+
                                  bezierXPts[3]*(1-t)*(1-t)*(1-t);

          paramYPts[pointCount] = bezierYPts[0]*t*t*t+
                                  bezierYPts[1]*t*t*(1-t)*3+
                                  bezierYPts[2]*t*(1-t)*(1-t)*3+
                                  bezierYPts[3]*(1-t)*(1-t)*(1-t);

          ++pointCount;
       }
    }

    function renderBezier() {
       bezierCount = Math.floor(bezierWidth/bezierGap);

       for(var v1=0; v1<bezierCount-1; v1+=bezierGap) {
          v2 = v1+bezierGap;

          points = "M"+paramXPts[v1]+","+paramYPts[v1]+" "+
                   "C"+bezierXPts[1]+","+bezierYPts[1]+" "+
                       bezierXPts[2]+","+bezierYPts[2]+" "+
                       (bezierXPts[3]-paramXPts[v2])+","+
                       (bezierYPts[3]-paramYPts[v2]);

          rVal = 0; gVal = 0; bVal = 0;

          if( v1 % 4 == 0 ) {
             rVal = v1*255/bezierCount;
          } else if( v1 % 4 == 1 ) {
             gVal = v1*255/bezierCount;
          } else if( v1 % 4 == 2 ) {
             bVal = v1*255/bezierCount;
          } else {
             rVal = v1*255/bezierCount;
             gVal = v1*255/bezierCount;
          }

        //fillColor = "rgb("+rVal+","+gVal+","+bVal+")";
          fillColor = "none";

          if( v1 % stripeGap == 0 ) {
             strokeColor = "red";
             strokeWidth = 1;
          } else {
             strokeColor = "rgb("+rVal+","+gVal+","+bVal+")";
             strokeWidth = 2;
          }

          bezierStyle = "stroke-width:"+strokeWidth+
                        ";stroke:"+strokeColor;

          if( (v1/bezierGap) % 2 == 0 ) {
             bezierStyle += ";fill:url(#checkerPattern1)";
          } else {
             bezierStyle += ";fill:url(#checkerPattern2)";
          }

          if( (v1/bezierGap) % 4 == 0 ) {
             bezierStyle += ";filter:url(#turbFilter4)";
          }

          opacity = v1/bezierCount;

        //bezierNode = document.createElement("path");
          bezierNode = document.createElementNS(svgNS, "path");
          bezierNode.setAttribute("style", bezierStyle);
          bezierNode.setAttribute("opacity", opacity);
          bezierNode.setAttribute("d", points);

          gcNode.appendChild(bezierNode);

          // add symmetric image of bezier curve...
          points = "M"+paramYPts[v1]+","+paramXPts[v1]+" "+
                   "C"+bezierYPts[1]+","+bezierXPts[1]+" "+
                       bezierYPts[2]+","+bezierXPts[2]+" "+
                       (bezierYPts[3]-paramYPts[v2])+","+
                       (bezierXPts[3]-paramXPts[v2]);

        //bezierNode = document.createElement("path");
          bezierNode = document.createElementNS(svgNS, "path");
          bezierNode.setAttribute("style", bezierStyle);
          bezierNode.setAttribute("d", points);

          gcNode.appendChild(bezierNode);

          // create a triangle...
          points = basePointX+","+basePointY+" "+
                   paramXPts[v1]+","+paramYPts[v1]+" "+
                   (bezierXPts[3]+paramXPts[v2]/4)+","+
                   (bezierYPts[3]+paramYPts[v2]/4);

          triangleStyle = "stroke-width:"+strokeWidth+
                          ";stroke:"+strokeColor+
                          ";fill:none";

        //triangleNode = document.createElement("polygon");
          triangleNode = document.createElementNS(svgNS, "polygon");
          triangleNode.setAttribute("style", triangleStyle);
          triangleNode.setAttribute("points", points);

          gcNode.appendChild(triangleNode);

          ellipseStyle = "stroke-width:"+strokeWidth+
                         ";stroke:"+strokeColor+
                         ";fill:none";

          if( v1 % minorAxis == 0 ) {
             ellipseStyle = "stroke:white";
          }

        //ellipseNode = document.createElement("ellipse");
          ellipseNode = document.createElementNS(svgNS, "ellipse");
          ellipseNode.setAttribute("style", ellipseStyle);
          ellipseNode.setAttribute("cx",  paramXPts[v1]);
          ellipseNode.setAttribute("cy",  paramYPts[v1]);
          ellipseNode.setAttribute("rx",  v2);
          ellipseNode.setAttribute("ry",  minorAxis);

          gcNode.appendChild(ellipseNode);
       }
    }
  ]]> </script>

<!-- ============================ -->
<defs>
   <filter id="turbFilter4" in="SourceImage" 
           filterUnits="objectBoundingBox">
      <feTurbulence baseFrequency="0.25" numOctaves="2" 
                    result="turbulenceOut1"/> 
        <feDisplacementMap in="SourceGraphic" in2="turbulenceOut1" 
                           xChannelSelector="B" yChannelSelector="B"
                           scale="20"/> 
   </filter>

  <pattern id="checkerPattern1" 
           width="10" height="10"
           patternUnits="userSpaceOnUse">
     <rect fill="red"
           x="0"  y="0"  width="5" height="5"/> 
     <rect fill="blue"
           x="5" y="0"   width="5" height="5"/> 
     <rect fill="blue"
           x="0"  y="5"  width="5" height="5"/> 
     <rect fill="red"
           x="5" y="5"   width="5" height="5"/> 
  </pattern>

  <pattern id="checkerPattern2" 
           width="10" height="10"
           patternUnits="userSpaceOnUse">
     <rect fill="yellow"
           x="0"  y="0"  width="5" height="5"/> 
     <rect fill="green"
           x="5" y="0"   width="5" height="5"/> 
     <rect fill="green"
           x="0"  y="5"  width="5" height="5"/> 
     <rect fill="yellow"
           x="5" y="5"   width="5" height="5"/> 
  </pattern>
</defs>

<g id="gc" transform="translate(50,50) scale(2,1)"
   filter="url(#turbFilter4)">
  <!-- render outer rectangle -->
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>
</svg>

