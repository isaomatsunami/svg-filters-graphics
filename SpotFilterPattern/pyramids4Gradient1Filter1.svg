<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg">
  <script type="text/ecmascript"> 
   <![CDATA[
    var basePointX      = 50;
    var basePointY      = 200;
    var currentX        = 0;
    var currentY        = 0;
    var pGramWidth      = 400;
    var slantLength     = 240;
    var slantAngle      = 30;
    var slantX          = 0;
    var slantY          = 0;
    var rowCount        = 4;
    var colCount        = 4;
    var cellWidth       = pGramWidth/colCount;
    var cellSlantHeight = slantLength/rowCount;
    var offsetX         = 0;
    var offsetY         = 0;
    var centerX         = 0;
    var centerY         = 0;
    var pyramidHeight   = 50;
    var sign            = -1;
    var vertexCount     = 3;
    var triangleXPts    = Array(vertexCount);
    var triangleYPts    = Array(vertexCount);
    var pGramXPts       = Array(vertexCount);
    var pGramYPts       = Array(vertexCount);

    var strokeWidth     = 1;
    var strokeColors    = ['red','green', 'blue','yellow'];
    var style           = "";
    var points          = "";
 
    var svgDocument     = null;
    var triangleNode    = null;
    var pGramNode       = null;
    var gcNode          = null;
    var svgNS           = "http://www.w3.org/2000/svg";

    function init(evt) {
       slantX = slantLength*Math.cos(
                      slantAngle*Math.PI/180);

       slantY = slantLength*Math.sin(
                      slantAngle*Math.PI/180);

       svgDocument = evt.target.ownerDocument; 
       gcNode = svgDocument.getElementById("gc")

       drawPyramids();
    }

    function drawBaseParallelogram() {
       // draw base parallelogram; points rendered
       // counter clockwise from lower-left vertex
       points  = basePointX+","+basePointY+" ";

       points += (basePointX+pGramWidth)+","+
                  basePointY+" ";

       points += (basePointX+pGramWidth+slantX)+","+
                 (basePointY-slantY)+" ";

       points += (basePointX+slantX)+","+
                 (basePointY-slantY)+" ";

       style = "fill:none;stroke:"+strokeColors[0];

       pGramNode = svgDocument.createElementNS(svgNS, "polygon");
       pGramNode.setAttribute("style",style);
       pGramNode.setAttribute("points", points);
       gcNode.appendChild(pGramNode);

    } // drawBaseParallelogram

    function drawPyramids(event) {
       drawBaseParallelogram();

       offsetX = slantX/colCount;
       offsetY = slantY/rowCount;

       for(var row=rowCount-1; row>=0; row--) {
          for(var col=0; col<colCount; col++) {
           //if( (row+col) % 2 == 0 ) { sign *= -1; }
             if( row % 2 == 0 ) { sign *= -1; }

             currentX = basePointX+row*offsetX+cellWidth*col;
             currentY = basePointY-slantY*row/rowCount;

             pGramXPts[0] = currentX;
             pGramYPts[0] = currentY;

             pGramXPts[1] = currentX+cellWidth;
             pGramYPts[1] = currentY;

             pGramXPts[2] = currentX+cellWidth+offsetX;
             pGramYPts[2] = currentY-offsetY;

             pGramXPts[3] = currentX+offsetX;
             pGramYPts[3] = currentY-offsetY;

             centerX = (pGramXPts[0]+pGramXPts[2])/2;
             centerY = (pGramYPts[0]+pGramYPts[2])/2;

             // left triangle...
             points  = pGramXPts[0]+","+pGramYPts[0]+" ";
             points += pGramXPts[3]+","+pGramYPts[3]+" ";
             points += centerX+","+
                       (centerY-sign*pyramidHeight);

             style = "fill:url(#radialGradient1)";

             triangleNode = svgDocument.createElementNS(svgNS, "polygon");
             triangleNode.setAttribute("style",style);
             triangleNode.setAttribute("points", points);
             gcNode.appendChild(triangleNode);

             // rear triangle...
             points  = pGramXPts[2]+","+pGramYPts[2]+" ";
             points += pGramXPts[3]+","+pGramYPts[3]+" ";
             points += centerX+","+ (centerY-sign*pyramidHeight);

             style = "fill:url(#radialGradient2)";

             triangleNode = svgDocument.createElementNS(svgNS, "polygon");
             triangleNode.setAttribute("style",style);
             triangleNode.setAttribute("points", points);
             gcNode.appendChild(triangleNode);

             // right triangle...
             points  = pGramXPts[1]+","+pGramYPts[1]+" ";
             points += pGramXPts[2]+","+pGramYPts[2]+" ";
             points += centerX+","+ (centerY-sign*pyramidHeight);

             style = "fill:url(#radialGradient1)";

             triangleNode = svgDocument.createElementNS(svgNS, "polygon");
             triangleNode.setAttribute("style",style);
             triangleNode.setAttribute("points", points);
             gcNode.appendChild(triangleNode);

             // front triangle...
             points  = pGramXPts[0]+","+pGramYPts[0]+" ";
             points += pGramXPts[1]+","+pGramYPts[1]+" ";
             points += centerX+","+ (centerY-sign*pyramidHeight);

             style = "fill:url(#radialGradient2)";

             triangleNode = svgDocument.createElementNS(svgNS, "polygon");
             triangleNode.setAttribute("style",style);
             triangleNode.setAttribute("points", points);
   
             gcNode.appendChild(triangleNode);
          }
       }
    } // drawSpiral
  ]]> </script>

<!-- ============================ -->
<defs>
  <filter id="turbFilter4" in="SourceImage" 
           filterUnits="objectBoundingBox">
      <feTurbulence baseFrequency="0.05" numOctaves="1" 
                    result="turbulenceOut1"/> 
        <feDisplacementMap in="SourceGraphic" in2="turbulenceOut1" 
                           xChannelSelector="B" yChannelSelector="R"
                           scale="8"/> 

      <feDiffuseLighting in="SourceGraphic" 
                         diffuseConstant="1" 
                         surfaceScale="1" 
                         style="lighting-color:#FF0000;">
         <feSpotLight x="-100" y="10" z="10" 
                      pointsAtX="10" pointsAtY="30" pointsAtZ="50" 
                      specularExponent="0"/>
     </feDiffuseLighting>
   </filter>

  <radialGradient id="radialGradient1" 
                  gradientUnits="userSpaceOnUse"
                  cx="400" cy="200" r="300" 
                  fx="400" fy="200">
    <stop offset="0"    stop-color="white"/>
    <stop offset=".149" stop-color="red"/>
    <stop offset=".15"  stop-color="blue"/>
    <stop offset=".649" stop-color="yellow"/>
    <stop offset=".65"  stop-color="green"/>
    <stop offset=".849" stop-color="red"/>
    <stop offset=".85"  stop-color="blue"/>
    <stop offset="1"    stop-color="black"/>
  </radialGradient>

  <radialGradient id="radialGradient2" 
                  gradientUnits="userSpaceOnUse"
                  cx="400" cy="200" r="300" 
                  fx="400" fy="200">
    <stop offset="0"    stop-color="yellow"/>
    <stop offset=".149" stop-color="red"/>
    <stop offset=".15"  stop-color="white"/>
    <stop offset="1"    stop-color="black"/>
  </radialGradient>
</defs>

<g id="gc" transform="translate(10,10)" 
   filter="url(#turbFilter4)">  
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>
</svg>

