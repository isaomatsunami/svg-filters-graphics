<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
     var basePointX       = 250;
     var basePointY       = 250;
     var fixedPointX      = 80;
     var fixedPointY      = 50;
     var feAngle          = 0;
     var feDeltaAngle     = 2;
     var feMinorAxis      = 50;
     var feMajorAxis      = 100;
     var feOffsetX        = 0;
     var feOffsetY        = 0;
     var slantAngle       = 40;
     var zSlantX          = 0;
     var zSlantY          = 0;
     var cosAngle         = Math.cos(slantAngle*Math.PI/180);
     var sinAngle         = Math.sin(slantAngle*Math.PI/180);
     var strokeWidth      = 4;
     var style            = "stroke:red;stroke-width:4";
     var dashStyles       = ['4 4 4 4',
                             '4 4 4 4',
                             '4 4 4 4'];
     var dashCount        = 3;
     var strokeColors     = ['red','green',
                             'blue','magenta','pink'];
     var colorCount       = 5;
     var axisCount        = 3;
     var posAxesLengths   = [200,300,220]; //z,x,y
     var negAxesLengths   = [250,250,150]; //z,x,y
     var angle            = 0;
     var angle2           = 0;
     var theAngle         = 0;
     var theAngle2        = 0;
     var xFactor          = 2.0;
     var xCoord           = 0;
     var yCoord           = 0;
     var zCoord           = 0;
     var zValue           = 0;
     var xValue           = 0;
     var yValue           = 0;
     var minZ             = -3*negAxesLengths[0]/4; 
     var maxZ             = 3*posAxesLengths[0]/4; 
     var deltaZ           = 10;
     var minX             = -negAxesLengths[1]/2; 
     var maxX             = posAxesLengths[1]/2; 
     var deltaX           = 10;
     var amplitudeZ       = 0.80;
     var amplitudeX       = 0.80;
     var amplitudeY       = 0.003;
     var vertexCount      = 4;
     var polygonXPts      = Array(vertexCount);
     var polygonYPts      = Array(vertexCount);
     var rVal             = 0;
     var gVal             = 0;
     var bVal             = 0;

     var pGonNode         = null;
     var lineNode         = null;
     var ellipseNode      = null;
     var polygonNode      = null;
     var svgDocument      = null;
     var gcNode           = null;
     var svgNS            = "http://www.w3.org/2000/svg";
 
     function init(evt) {
        svgDocument = evt.target.ownerDocument; 
        gcNode = svgDocument.getElementById("gc")
 
        draw3DAxes();
        draw3DSurface();
     }

     function draw3DAxes() {
        // left outward (positive) z-axis 
        zSlantX = posAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = posAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-zSlantX);
        lineNode.setAttribute("y2", basePointY+zSlantY);
        gcNode.appendChild(lineNode);

        // right receding (negative) z-axis 
        zSlantX = negAxesLengths[0]*Math.sin(
                           slantAngle*Math.PI/180);

        zSlantY = negAxesLengths[0]*Math.cos(
                           slantAngle*Math.PI/180);

        style  = "stroke:"+strokeColors[0];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[0];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+zSlantX);
        lineNode.setAttribute("y2", basePointY-zSlantY);
        gcNode.appendChild(lineNode);

        // upper vertical y-axis 
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY-posAxesLengths[2]);
        gcNode.appendChild(lineNode);

        // lower vertical y-axis 
        style  = "stroke:"+strokeColors[2];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[1];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX);
        lineNode.setAttribute("y2", basePointY+negAxesLengths[2]);
        gcNode.appendChild(lineNode);

        // right horizontal x-axis 
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX+posAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
        gcNode.appendChild(lineNode);

        // left horizontal x-axis 
        style  = "stroke:"+strokeColors[1];
        style += ";stroke-width:"+strokeWidth;
        style += ";stroke-dasharray:"+dashStyles[2];

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX);
        lineNode.setAttribute("y1", basePointY);
        lineNode.setAttribute("x2", basePointX-negAxesLengths[1]);
        lineNode.setAttribute("y2", basePointY)
        gcNode.appendChild(lineNode);
     }

// y = x^2*z^2 

     function draw3DSurface() {
        for(var x=minX; x<maxX; x+=deltaX) {
           for(var z=minZ; z<maxZ; z+=deltaZ) {
              // calculate coordinates of vertices...
              zCoord = z;
              xCoord = x;
              yCoord = xCoord*xCoord-zCoord*zCoord;

              zCoord *= amplitudeZ;
              xCoord *= amplitudeX;
              yCoord *= amplitudeY;

              polygonXPts[0] = xCoord-zCoord*sinAngle;
              polygonYPts[0] = yCoord+zCoord*cosAngle;

              zCoord = z+deltaZ;
              xCoord = x;
              yCoord = xCoord*xCoord-zCoord*zCoord;

              zCoord *= amplitudeZ;
              xCoord *= amplitudeX;
              yCoord *= amplitudeY;

              polygonXPts[1] = xCoord-zCoord*sinAngle;
              polygonYPts[1] = yCoord+zCoord*cosAngle;

              zCoord = z+deltaZ;
              xCoord = x+deltaX;
              yCoord = xCoord*xCoord-zCoord*zCoord;

              zCoord *= amplitudeZ;
              xCoord *= amplitudeX;
              yCoord *= amplitudeY;

              polygonXPts[2] = xCoord-zCoord*sinAngle;
              polygonYPts[2] = yCoord+zCoord*cosAngle;

              zCoord = z;
              xCoord = x+deltaX;
              yCoord = xCoord*xCoord-zCoord*zCoord;

              zCoord *= amplitudeZ;
              xCoord *= amplitudeX*xFactor;
              yCoord *= amplitudeY;

              polygonXPts[3] = xCoord-zCoord*sinAngle;
              polygonYPts[3] = yCoord+zCoord*cosAngle;

              points = "M";
              for(var v=0; v<vertexCount; v++)
              {
                 points += (basePointX+polygonXPts[v])+","+
                           (basePointY+polygonYPts[v])+" ";
              }

              rVal = (z-minZ)*255/(maxZ-minZ);
              bVal = x*255/(maxX-minX);

              style  = "fill:rgb("+rVal+","+gVal+","+bVal+")"+
                       ";stroke:yellow;stroke-width:3"+
                       ";stroke-dasharray:"+dashStyles[(z+x)%dashCount];

              polygonNode = svgDocument.createElement("path");

              polygonNode.setAttribute("style",style);
              polygonNode.setAttribute("d", points);
   
              gcNode.appendChild(polygonNode);

              index = (x-minX)/deltaX+(z-minZ)/deltaZ;

              if( index % 4 == 0 )
              {
                 addLineSegment();
              }
           }
        }
     }

     function addLineSegment() {
        rVal = feAngle%255; gVal = 0; bVal = 0; 

        style  = "stroke:rgb("+rVal+","+gVal+","+bVal+")"+
                 ";stroke-width:2";

        offsetX = feMajorAxis*Math.cos(feAngle*Math.PI/180);
        offsetY = feMinorAxis*Math.sin(feAngle*Math.PI/180);

        feAngle += feDeltaAngle;

        lineNode = svgDocument.createElementNS(svgNS, "line");
        lineNode.setAttribute("style", style);
        lineNode.setAttribute("x1", basePointX+polygonXPts[0]);
        lineNode.setAttribute("y1", basePointY+polygonYPts[0]);
        lineNode.setAttribute("x2", fixedPointX+offsetX);
        lineNode.setAttribute("y2", fixedPointY+offsetY);
        gcNode.appendChild(lineNode);
     }
  ]]> </script>

<!-- ============================ -->
<defs>
  <filter id="turbFilter4" in="SourceImage" 
           filterUnits="objectBoundingBox">
      <feTurbulence baseFrequency="0.05" numOctaves="0" 
                    result="turbulenceOut1"/> 
        <feDisplacementMap in="SourceGraphic" in2="turbulenceOut1" 
                           xChannelSelector="B" yChannelSelector="B"
                           scale="10"/> 
   </filter>
</defs>

<g id="gc" transform="translate(20,0)"
   filter="url(#turbFilter4)">  
</g>
</svg>

