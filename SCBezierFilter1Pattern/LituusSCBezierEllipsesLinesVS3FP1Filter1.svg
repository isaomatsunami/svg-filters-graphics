<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
   <![CDATA[
    var width         = 800;
    var height        = 500;
    var basePointX    = 500;
    var basePointY    = 250;
    var fixedPointX1  = 400;
    var fixedPointY1  = 100;
    var currentX      = 0;
    var currentY      = 0;
    var offsetX       = 0;
    var offsetY       = 0;
    var radius        = 0;
    var slantX        = 0;
    var slantY        = 0;
    var slantAngle    = 20;
    var slantLength   = 80;
    var minorAxis     = 10;
    var majorAxis     = 20;
    var Constant      = 200;
    var angle         = 0;
    var maxAngle      = 720;
    var angleDelta    = 3;
    var hGap          = 2;
    var strokeColor   = "";
    var fillColor     = "";
    var strokeWidth   = 1;
    var style         = "";
    var rVal          = 0;
    var gVal          = 0;
    var bVal          = 0;
    var currentStrip  = 0;
    var stripCount    = 15;
    var stripWidth    = maxAngle/stripCount;
 
    var ellipseNode   = null;
    var cBezierNode   = null;
    var svgDocument   = null;
    var gcNode        = null;
    var svgNS         = "http://www.w3.org/2000/svg";

    function init(evt) {
       slantX = slantLength*Math.cos(
                            slantAngle*Math.PI/180);

       slantY = slantLength*Math.sin(
                            slantAngle*Math.PI/180);

       svgDocument = evt.target.ownerDocument; 
       gcNode = svgDocument.getElementById("gc")

       drawSpiral();
    }

    function drawSpiral() {
       for(angle=1; angle<maxAngle; angle+=angleDelta) {
          radius  = Constant*Constant/angle;
  
          offsetX = radius*Math.cos(angle*Math.PI/180);
          offsetY = radius*Math.sin(angle*Math.PI/180);

          setCurrentColor(angle);

          fillColor = "rgb("+rVal+","+gVal+","+bVal+")";
          strokeColor = "rgb("+rVal+","+gVal+","+bVal+")";

          currentX = basePointX+offsetX;
          currentY = basePointY-offsetY;
          addEllipse(currentX, currentY);

          if( angle % hGap == 0 ) {
             addLine(currentX, currentY);
          } 

          currentX = basePointX-offsetX;
          currentY = basePointY+offsetY;
          addEllipse(currentX, currentY);

          if( angle % hGap == 0 ) {
             addLine(currentX, currentY);
             addLineFP(currentX, currentY);
          } 
       }
    } // drawSpiral

    function drawCBezierArc() {
       // outer bezier arc...
       points  = "m"+(currentX)+","+(currentY)+" ";
       points += "C"+(majorAxis)+","+(-5*majorAxis/4)+" ";
       points +=     (0)+","+(4*majorAxis/2)+" ";
       points +=     (0)+","+(3*majorAxis/2)+" ";
       points += "S"+(0)+","+(3*majorAxis/2)+" ";
       points +=     (0)+","+(4*majorAxis/2)+" ";

       style  = "fill:red;stroke-width:8";
       style += ";stroke-dasharray:8 8 8 8";

       cBezierNode = svgDocument.createElementNS(svgNS, "path");
       cBezierNode.setAttribute("d", points);
       cBezierNode.setAttribute("style", style);
       gcNode.appendChild(cBezierNode);

       // inner bezier arc...
       points  = "m"+(currentX)+","+(currentY)+" ";
       points += "C"+(2*majorAxis/2)+","+(-3*majorAxis/4)+" ";
       points +=     (majorAxis/2)+","+(0)+" ";
       points +=     (0)+","+(2*majorAxis)+" ";

       cBezierNode = svgDocument.createElementNS(svgNS, "path");
       cBezierNode.setAttribute("d", points);
       cBezierNode.setAttribute("style", "stroke:red;stroke-width:8");
       gcNode.appendChild(cBezierNode);
    }

    function addEllipse() {
       style  = "fill:"+fillColor+";stroke:red;";
       style += "stroke-width:"+strokeWidth;

       ellipseNode = document.createElementNS(svgNS, "ellipse");
       ellipseNode.setAttribute("style",style);
       ellipseNode.setAttribute("cx", currentX);
       ellipseNode.setAttribute("cy", currentY);
       ellipseNode.setAttribute("rx", majorAxis);
       ellipseNode.setAttribute("ry", minorAxis);
       gcNode.appendChild(ellipseNode);

       drawCBezierArc();
    } // addEllipse

    function addLine(currentX, currentY) {
       style  = "stroke:"+strokeColor;
       style += ";stroke-width:"+strokeWidth;
   
       lineNode = svgDocument.createElementNS(svgNS, "line");
       lineNode.setAttribute("style",style);
       lineNode.setAttribute("x1", currentX);
       lineNode.setAttribute("y1", currentY);
       lineNode.setAttribute("x2", currentX-slantX);
       lineNode.setAttribute("y2", currentY-slantY);
       gcNode.appendChild(lineNode);
    } // addLine

    function setCurrentColor(angle) {
       currentStrip = Math.floor(angle/stripWidth);

       rVal = 0; gVal = 0; bVal = 0;

       if( currentStrip % 3 == 0 ) {
          rVal = (angle%stripWidth)*255/stripWidth;
       } else if( currentStrip % 3 == 1 ) {
          gVal = (angle%stripWidth)*255/stripWidth;
       } else {
          bVal = (angle%stripWidth)*255/stripWidth;
       }
    } // setCurrentColor

    function addLineFP(currentX, currentY) {
       style  = "stroke:yellow";
       style += ";stroke-width:"+strokeWidth;
       style += ";stroke-dasharray:8 2 8 2;";
   
       lineNode = svgDocument.createElementNS(svgNS, "line");
       lineNode.setAttribute("style",style);
       lineNode.setAttribute("x1", fixedPointX1);
       lineNode.setAttribute("y1", fixedPointY1);
       lineNode.setAttribute("x2", currentX);
       lineNode.setAttribute("y2", currentY);
       gcNode.appendChild(lineNode);
    } // addLineFP
  ]]> </script>

<!-- ============================ -->
<defs>
  <filter id="turbFilter4" in="SourceImage" 
           filterUnits="objectBoundingBox">
      <feTurbulence baseFrequency="0.05" numOctaves="1" 
                    result="turbulenceOut1"/> 
        <feDisplacementMap in="SourceGraphic" in2="turbulenceOut1" 
                           xChannelSelector="B" yChannelSelector="B"
                           scale="2"/> 
   </filter>
</defs>

<g id="gc" transform="translate(10,10)" 
   filter="url(#turbFilter4)">  
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>
</svg>

