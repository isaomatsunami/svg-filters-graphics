<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<svg width="100%" height="100%" onload="init(evt)"
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg">

  <script type="text/ecmascript"> 
    <![CDATA[
    var basePointX    = 200;
    var basePointY    = 160;
    var offsetX       = 0;
    var offsetY       = 0;
    var radius        = 160;
    var vertexCount   = 5;
    var vertexAngle   = 360/vertexCount;
    var outerXPts     = Array(vertexCount);
    var outerYPts     = Array(vertexCount);
    var innerXPts     = Array(vertexCount);
    var innerYPts     = Array(vertexCount);
    var xPointsSum    = 0;
    var yPointsSum    = 0;
    var scaleFactor   = 0.8;
    var nestedCount   = 12;
    var centerX       = 0;
    var centerY       = 0;
    var outerPoints   = "";
    var innerPoints   = "";
    var outerStyle    = "";
    var innerStyle    = "";
    var strokeWidth   = 1;
    var polygonColors = ['red','green', 'blue','yellow'];
    var colorCount    = 2;
    var rVal          = 0;
    var gVal          = 0;
    var bVal          = 0;
 
    var outerPolyNode = null;
    var innerPolyNode = null;
    var svgDocument   = null;
    var gcNode        = null;
    var svgNS         = "http://www.w3.org/2000/svg";

    function init(evt) {
       svgDocument = evt.target.ownerDocument; 
       gcNode = svgDocument.getElementById("gc")

       initializeOuterPoints();
       initializeInnerPoints();
       drawPolygons(event);
    }

    function initializeOuterPoints() {
       xPointsSum = 0;
       yPointsSum = 0;

       for(var v=0; v<vertexCount; v++) {
          angle = v*vertexAngle*Math.PI/180;

          outerXPts[v] = basePointX+
                             radius*Math.cos(angle);

          outerYPts[v] = basePointY-
                             radius*Math.sin(angle);

          xPointsSum += outerXPts[v];
          yPointsSum += outerYPts[v];
       }

       centerX = xPointsSum/vertexCount;
       centerY = yPointsSum/vertexCount;

    } // initializeOuterPoints

    function initializeInnerPoints() {
       for(var v=0; v<vertexCount; v++) {
          innerXPts[v] = basePointX+
               (outerXPts[v]-centerX)*scaleFactor;
 
          innerYPts[v] = basePointY+
               (outerYPts[v]-centerY)*scaleFactor;
       }
    } // initializeInnerPoints

    function resizePolygons(counter) {
       xPointsSum = 0;
       yPointsSum = 0;

       for(var v=0; v<vertexCount; v++) {
          outerXPts[v] = innerXPts[v];
          outerYPts[v] = innerYPts[v];

          xPointsSum += outerXPts[v];
          yPointsSum += outerYPts[v];
       }

       centerX = xPointsSum/vertexCount;
       centerY = yPointsSum/vertexCount;

       rVal = counter*255/nestedCount;
       gVal = 0;
       bVal = 0;
 
       outerStyle = "fill:rgb("+rVal+","+gVal+","+
                                bVal+")";
     //innerStyle = polygonColors[(counter+1)%colorCount];

       initializeInnerPoints();

    } // resizePolygons

    function drawPolygons(event) {
       for(var c=0; c<nestedCount; c++) {
          showPolygons(event);
          resizePolygons(c);
       }
    } // drawPolygons

    function showPolygons(event) {
       outerPoints = "";
       innerPoints = "";

       for(var v=0; v<vertexCount; v++) {
          outerPoints += outerXPts[v]+","+
                         outerYPts[v]+" ";

          innerPoints += innerXPts[v]+","+
                         innerYPts[v]+" ";
       }

       outerPolyNode = svgDocument.createElementNS(svgNS, "polygon");
       outerPolyNode.setAttribute("style", outerStyle);
       outerPolyNode.setAttribute("points",outerPoints);
       gcNode.appendChild(outerPolyNode);

       innerPolyNode = svgDocument.createElementNS(svgNS, "polygon");
       innerPolyNode.setAttribute("style", innerStyle);
       innerPolyNode.setAttribute("points",innerPoints);
     //gcNode.appendChild(innerPolyNode);
    } // showPolygons
  ]]> </script>

<!-- ============================ -->
<defs>
  <filter id="turbFilter4" in="SourceImage" 
           filterUnits="objectBoundingBox">
      <feTurbulence baseFrequency="0.25" numOctaves="3" 
                    result="turbulenceOut1"/> 
        <feDisplacementMap in="SourceGraphic" in2="turbulenceOut1" 
                           xChannelSelector="B" yChannelSelector="B"
                           scale="30"/> 
   </filter>
</defs>

<g id="gc" transform="translate(10,10)"
   filter="url(#turbFilter4)">  
  <rect x="0" y="0" 
        width="800" height="500" 
        fill="none" stroke="none"/>
</g>
</svg>

